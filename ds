class Stack:
    def __init__(self):
        self.elements = []

    def is_empty(self):
        return len(self.elements) == 0

    # option 1
    def pop_element(self):
        if not self.is_empty():
            return self.elements.pop()
        raise IndexError("pop from empty stack")

    # option 2
    # def pop_element(self):
    #     if not self.is_empty():
    #         top_index = len(self.elements) - 1
    #         item = self.elements[top_index]
    #         self.elements = self.elements[:top_index]
    #         return item
    # raise IndexError("pop from empty stack")

    def push_element(self, element):
        self.elements.append(element)

    def top_element(self):
        return self.elements[-1]

    def size(self):
        return len(self.elements)


stack = Stack()


class Queue:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def size(self):
        return len(self.items)

    def pop_item(self):
        if not self.is_empty():
            return self.items.pop[0]
        return IndexError("pop from empty queue")

    def push_item(self, item):
        self.items.append(item)

    def front(self):
        if not self.is_empty():
            return self.items[0]
        raise IndexError("front from empty queue")
   
    
queue = Queue()

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None


class Node:
    def __init__(self, value):
        self.value = value
        self.next = None


class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):  # O(1)
        return self.head is None

    def push_front(self, value):  # O(1)
        new_node = Node(value)
        new_node.next = self.head
        self.head = new_node

    def pop_front(self):  # O(1)
        if self.is_empty():
            raise IndexErro("pop from empty singly linked list")
        value = self.head.value
        self.head = self.head.next
        return value

    def push_back(self, value):  # O(n)
        new_node = Node(value)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def pop_back(self):  # O(n)
        if self.is_empty():
            raise IndexError("pop from empty singly linked list")
        if self.head.next is None:
            value = self.head.value
            self.head = None
            return value
        current = self.head
        while current.next.next:
            current = current.next
        value = current.next.value
        current.next = None
        return value

    def remove(self, target):  # O(n)
        if self.is_empty():
            raise ValueError(f"{target} is not in singly linked list")
        if self.head.value == target:
            self.head = self.head.next
            return
        current = self.head
        while current.next:
            if current.next.value == target:
                current.next = current.next.next
                return
            current = current.next
        raise ValueError(f"{target} is not in singly linked list")

    def size(self):  # O(n)
        length = 0
        current = self.head
        while current:
            current = current.next
            length += 1
        return length

    def display(self):  # O(n)
        if not self.is_empty():
            current = self.head
            while current:
                print(current.value, end=" -> ")
                current = current.next
        else:
            print("The singly linked list is empty.")

    def insert(self, index, value):  # O(n)
        if index < 0:
            raise IndexError("Index out of range")
        new_node = Node(value)
        if index == 0:
            self.push_front(value)
            return
        current = self.head
        for _ in range(index - 1):
            if current is None:
                raise IndexError("Index out of range")
            current = current.next
        new_node.next = current.next
        current.next = new_node

    def clear(self):  # O(1)
        self.head = None

    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev
        return self.head

    def merge(self, list1, list2):
        current = list1.head
        while current.next:
            current = current.next
        current.next = list2.head
        return list1.head

    def merge_sort(self):
        if self.head is None or self.head.next is None:
            return self.head
        mid = self._find_middle()
        left_half = SinglyLinkedList()
        left_half.head = self.head
        right_half = SinglyLinkedList()
        right_half.head = mid.next
        mid.next = None
        left_half.merge_sort()
        right_half.merge_sort()
        self.head = self._merge(left_half.head, right_half.head)

    def _find_middle(self):
        slow = self.head
        fast = self.head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        return slow
    def _merge(self, left, right):
        dummy = Node(0)
        current = dummy
        while left and right:
            if left.value < right.value:
                current.next = left
                left = left.next
            else:
                current.next = right
                right = right.next
            current = current.next
        if left:
            current.next = left
        else:
            current.next = right
        return dummy.next


sl = SinglyLinkedList()

print(sl.size())
print(sl.is_empty())
sl.insert(0,3)
sl.insert(1,7)
sl.push_front(5)
sl.push_back(89)
sl.push_back(4)
sl.push_back(9)
sl.display()
sl.merge_sort()
sl.display()
sl.reverse()
sl.display()
sl.reverse()
sl.display()

class DynamicArray:
    def __init__(self):
        self.capacity = 2
        self.size = 0
        self.array = [None] * self.capacity

    def get_size(self):
        return self.size

    def get_capacity(self):
        return self.copacity

    def is_empty(self):
        return self.size == 0

    def clear(self):
        self.size = 0
        self.capacity = 2
        self.array = [None] * self.capacity

    def push_back(self, value):
        if self.size == self.capacity:
            self.capacity *= 2
            new_array = [None] * self.capacity
            for i in range(self.size):
                new_array[i] = self.array[i]
            self.array = new_array
        self.array[self.size] = value
        self.size += 1

    def extend(self, other_array):
        if self.size + len(other_array) >= self.capacity:
            self.__resize((self.size + len(other_array) * 2))
        for element in other_array:
            self.push_back(element)

    def pop_back(self):
        if self.size == 0:
            raise IndexError("pop from empty dynamic array")
        value = self.array[self.size - 1]
        self.size -= 1
        if self.size <= self.capacity // 4:
            self.__resize(self.capacity // 2)
        return value

    def __getitem__(self, index):
        if index < 0:
            index += self.size
        if 0 <= index < self.size:
            return self.array[index]
        raise IndexError("Index out of range")

    def __resize(self, new_capacity):
        new_array = [None] * new_capacity
        for i in range(self.size):
            new_array[i] = self.array[i]
        self.array = new_array
        self.capacity = new_capacity

    def count(self, element):
        count = 0
        for i in range(self.size):
            if self.array[i] == element:
                count += 1
        return count

    def index(self, element):
        for i in range(self.size):
            if self.array[i] == element:
                return i
        raise ValueError(f"{element} is not in dynamic array")

    def remove(self, value):
        index = self.index(value)
        for i in range(index, self.size - 1):
            self.array[i] = self.array[i + 1]
        self.array[self.size - 1] = None
        self.size -= 1
        if self.size <= self.capacity // 4:
            self.__resize(self.capacity // 2)

    def insert(self, index, value):
        if index < 0:
            index += self.size + 1
        if index < 0 or index > self.size:
            raise IndexError("Index out of range")
        if self.size == self.capacity:
            self.__resize(self.capacity * 2)
        for i in range(self.size, index, -1):
            self.array[i] = self.array[i - 1]
        self.array[index] = value
        self.size += 1

    def __str__(self):
        return "[" + ", ".join(str(self.array[i]) for i in range(self.size)) + "]"



dc = DynamicArray()
