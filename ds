class Stack:
    def __init__(self):
        self.elements = []

    def is_empty(self):
        return len(self.elements) == 0

    # option 1
    def pop_element(self):
        if not self.is_empty():
            return self.elements.pop()
        raise IndexError("pop from empty stack")

    # option 2
    # def pop_element(self):
    #     if not self.is_empty():
    #         top_index = len(self.elements) - 1
    #         item = self.elements[top_index]
    #         self.elements = self.elements[:top_index]
    #         return item
    # raise IndexError("pop from empty stack")

    def push_element(self, element):
        self.elements.append(element)

    def top_element(self):
        return self.elements[-1]

    def size(self):
        return len(self.elements)


stack = Stack()


class Queue:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def size(self):
        return len(self.items)

    def pop_item(self):
        if not self.is_empty():
            return self.items.pop[0]
        return IndexError("pop from empty queue")

    def push_item(self, item):
        self.items.append(item)

    def front(self):
        if not self.is_empty():
            return self.items[0]
        raise IndexError("front from empty queue")
   
    
queue = Queue()

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None


class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):  # O(1)
        return self.head is None

    def push_front(self, value):  # O(1)
        new_node = Node(value)
        new_node.next = self.head
        self.head = new_node

    def pop_front(self):  # O(1)
        if self.is_empty():
            raise IndexErro("pop from empty singly linked list")
        value = self.head.value
        self.head = self.head.next
        return value

    def push_back(self, value):  # O(n)
        new_node = Node(value)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def pop_back(self):  # O(n)
        if self.is_empty():
            raise IndexError("pop from empty singly linked list")
        if self.head.next is None:
            value = self.head.value
            self.head = None
            return value
        current = self.head
        while current.next.next:
            current = current.next
        value = current.next.value
        current.next = None
        return value

    def remove(self, target):  # O(n)
        if self.is_empty():
            raise ValueError(f"{target} is not in singly linked list")
        if self.head.value == target:
            self.head = self.head.next
            return
        current = self.head
        while current.next:
            if current.next.value == target:
                current.next = current.next.next
                return
            current = current.next
        raise ValueError(f"{target} is not in singly linked list")

    def size(self):  # O(n)
        length = 0
        current = self.head
        while current:
            current = current.next
            length += 1
        return length

    def display(self):  # O(n)
        if not self.is_empty():
            current = self.head
            while current:
                print(current.value, end=" -> ")
                current = current.next
        else:
            print("The singly linked list is empty.")

    def insert(self, index, value):  # O(n)
        if index < 0:
            raise IndexError("Index out of range")
        new_node = Node(value)
        if index == 0:
            self.push_front(value)
            return
        current = self.head
        for _ in range(index - 1):
            if current is None:
                raise IndexError("Index out of range")
            current = current.next
        new_node.next = current.next
        current.next = new_node

    def clear(self):  # O(1)
        self.head = None


sl = SinglyLinkedList()
